<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on</title><link>https://bhavikdodda.github.io/amethyst/Writeup/</link><description>Recent content in Blogs on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bhavikdodda.github.io/amethyst/Writeup/index.xml" rel="self" type="application/rss+xml"/><item><title>Cantors Theorem</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Cantors-Theorem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Cantors-Theorem/</guid><description>Can be there an onto function from $A\rightarrow P(A)$?
Assume that there exists an onto function $g:A\rightarrow P(A)$
Construct a set $S= \{x\in A|x\notin g(x)\}$
Since g is onto, an $s\in P(A)$ has a preimage, i.e. $\exists x\in A(g(x)=S)$
Contradiction # Let&amp;rsquo;s analyze if $x\in S$
Assume $x\in S$ $x\notin g(x)\Rightarrow x\notin S$ Contradiction!
Assume $x\notin S$ $x\in g(x)\Rightarrow x\in S$ Contradiction!
Conclusion # No onto function exists from $A\rightarrow P(A)$</description></item><item><title>Uncountability</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Uncountability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Uncountability/</guid><description>Consider the set of all binary strings: B
Question: Is B countably infinite?
Setup # It&amp;rsquo;s same as asking the question: Does a bijection exist between $\mathbb{N}$ and B?
For the time being, let us assume that there exists such a bijection.
On one column we have natural numbers, and on the other we have all binary strings listed down&amp;hellip;
N B 1 01010100101010001&amp;hellip; 2 1101010111011110101&amp;hellip; 3 001101011100001010&amp;hellip; &amp;hellip; &amp;hellip; Let there be a function L(i,j) encoding this bijection.</description></item><item><title>Halting Problem</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Halting-Problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Halting-Problem/</guid><description>Inspired by: Math&amp;rsquo;s Fundamental Flaw - YouTube
Setup # We know Turing machines are theoretically capable of executing any possible program. (hence the term turing-complete)
Q: Does a turing program exist that can say whether or not a program will halt or not?
Let&amp;rsquo;s assume this amazing program exists and call it A A:(program,input)-&amp;gt;{0,1} returns 0 if program(input) halts and 1 if it doesn&amp;rsquo;t.
Although A is a program, it&amp;rsquo;s like a mathematical function which takes in an input (program,input) and returns 0 or 1.</description></item><item><title>Russel's Paradox</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Russels-Paradox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Russels-Paradox/</guid><description>Russell&amp;rsquo;s Paradox - A Ripple in the Foundations of Mathematics - YouTube
Sets can contain other sets as well.
Q. Does a set exist that contains itself?
Feels like the answer should be no, because that would lead to an infinitely nested set. But the answer is yes. We can define a set based on the property of its elements that it can contain.
Example of a set that contains itself: $S= \{a|\text{a is not a human}\}$</description></item><item><title>Diagonal Argument</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Diagonal-Argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Diagonal-Argument/</guid><description>We can summarize the proof of [[Writeup/Uncountability|Uncountability]], [[Writeup/Uncountability#Cantor&amp;rsquo;s Theorem|Cantor&amp;rsquo;s Theorem]] , [[Writeup/Halting Problem|Halting Problem]], [[Writeup/Russel&amp;rsquo;s Paradox|Russel&amp;rsquo;s Paradox]] in one category theory proof
The proofs can be represented in a similar ways abstractifying them into a structure. All of them have the common elements:
A flipping mechanism A &amp;lsquo;powerful&amp;rsquo; function satisfying a property A looping/recursive mechanism utilizing the function, in order to create a contradiction Diagonalization function D(.)=(.,.) So, L(D(.</description></item><item><title>Table of Contents</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Writeup/</guid><description>Blogs # [[Writeup/Cantors Theorem|Cantors Theorem]] [[Writeup/Uncountability|Uncountability]] [[Writeup/Halting Problem|Halting Problem]] [[Writeup/Russel&amp;rsquo;s Paradox|Russel&amp;rsquo;s Paradox]] [[Writeup/Diagonal Argument|Diagonal Argument]]</description></item></channel></rss>