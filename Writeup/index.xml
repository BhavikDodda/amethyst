<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on</title><link>https://bhavikdodda.github.io/amethyst/Writeup/</link><description>Recent content in Blogs on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bhavikdodda.github.io/amethyst/Writeup/index.xml" rel="self" type="application/rss+xml"/><item><title>Uncountability</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Uncountability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Uncountability/</guid><description>Consider the set of all binary strings: B
Question: Is B countably infinite?
Does a bijection exist between $\mathbb{N}$ and B?
For the time being, let us assume that there exists such a bijection.
On one column we have natural numbers, and on the other we have all binary strings listed down&amp;hellip;
N B 1 01010100101010001&amp;hellip; 2 1101010111011110101&amp;hellip; 3 001101011100001010&amp;hellip; &amp;hellip; &amp;hellip; Let there be a function L(i,j) encoding this bijection.</description></item><item><title>Halting Problem</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Halting-Problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Halting-Problem/</guid><description>Inspired by: Math&amp;rsquo;s Fundamental Flaw - YouTube
We know Turing machines are theoretically capable of executing any possible program. (hence the term turing-complete)
Q: Does a turing program exist that can say whether or not a program will halt or not?
Let&amp;rsquo;s assume this amazing program exists and call it A A:(program,input)-&amp;gt;{0,1} returns 0 if program(input) halts and 1 if it doesn&amp;rsquo;t.
Although A is a program, it&amp;rsquo;s like a mathematical function which takes in an input (program,input) and returns 0 or 1.</description></item><item><title>Diagonal Argument</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Diagonal-Argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Diagonal-Argument/</guid><description>We can summarize the proof of [[Writeup/Uncountability|Uncountability]], [[Writeup/Halting Problem|Halting Problem]] in one category theory proof
Uncountability # mermaid.initialize({ "flowchart": { "useMaxWidth":true }, "theme": "default" } ) graph LR subgraph . c[N] --diag-- a[N X N] end subgraph .. b["{0,1}"] --f-- d["{0,1}"] end c --special-- d a--L--b S(.)=F(L(D(.)))
L is exhaustive
Halting Problem # graph LR subgraph . c[N] --diag-- a[N X N] end subgraph .. b[N] --f-- d[N] end c --special-- d a--A--b Here N is the numeric representation of program</description></item><item><title>Table of Contents</title><link>https://bhavikdodda.github.io/amethyst/Writeup/Writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bhavikdodda.github.io/amethyst/Writeup/Writeup/</guid><description>Blogs # [[Writeup/Halting Problem|Halting Problem]] [[Writeup/Uncountability|Uncountability]] [[Writeup/Diagonal Argument|Diagonal Argument]]</description></item></channel></rss>